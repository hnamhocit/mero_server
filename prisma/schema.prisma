generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        Int       @id @default(autoincrement())
  displayName               String
  email                     String    @unique
  password                  String
  refreshToken              String?
  bio                       String?
  photoURL                  String?
  photoId                   String?
  backgroundURL             String?
  backgroundId              String?
  verificationCode          String?
  verificationCodeExpiresAt DateTime?
  isEmailVerified           Boolean   @default(false)
  role                      Role      @default(USER)
  sex                       Sex       @default(UNKNOWN)
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt

  sentRequests     FriendRequest[] @relation("FriendRequestFrom")
  receivedRequests FriendRequest[] @relation("FriendRequestTo")

  friends Friend[] @relation("Friends")
  friendsOf Friend[] @relation("FriendsOf")

  messages     Message[]
  participants Participant[]
}

model FriendRequest {
  id        Int      @id @default(autoincrement())
  fromId    Int
  toId      Int
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  from User @relation("FriendRequestFrom", fields: [fromId], references: [id])
  to   User @relation("FriendRequestTo", fields: [toId], references: [id])
}

model Friend {
  id        Int      @id @default(autoincrement())
  userId   Int
  friendId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation("Friends", fields: [userId], references: [id])
  friend User @relation("FriendsOf", fields: [friendId], references: [id])
}

model Conversation {
  id            Int              @id @default(autoincrement())
  type          ConversationType @default(GROUP)
  name          String?
  photoURL      String?
  photoId       String?
  lastMessageId Int?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  lastMessage  Message?      @relation("LastMessage", fields: [lastMessageId], references: [id])
  messages     Message[]
  participants Participant[]
}

model Participant {
  id                Int             @id @default(autoincrement())
  conversationId    Int
  userId            Int
  role              ParticipantRole @default(MEMBER)
  lastSeenMessageId Int?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  conversation    Conversation @relation(fields: [conversationId], references: [id])
  user            User         @relation(fields: [userId], references: [id])
  lastSeenMessage Message?     @relation("LastSeenMessage", fields: [lastSeenMessageId], references: [id])

  @@unique([conversationId, userId])
}

model Message {
  id             Int      @id @default(autoincrement())
  content        String
  conversationId Int
  senderId       Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  conversation Conversation @relation(fields: [conversationId], references: [id])
  sender       User         @relation(fields: [senderId], references: [id])

  conversationAsLast Conversation[] @relation("LastMessage")
  participantAsLast  Participant[]  @relation("LastSeenMessage")
}

enum Role {
  USER
  ADMIN
}

enum Sex {
  MALE
  FEMALE
  UNKNOWN
  OTHER
}

enum ConversationType {
  DIRECT
  GROUP
}

enum ParticipantRole {
  ADMIN
  SUB_ADMIN
  MEMBER
}
